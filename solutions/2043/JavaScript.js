/*
 * language: JavaScript
 * problem: 2043. Simple Bank System
 * link: https://leetcode.com/problems/simple-bank-system/
 * note: object-oriented, flat
 * note: compressed
 * author: Brute Lee <https://github.com/rdancer/brute-lee>
 */
testNumber = 0;
/**
 * @param {number[]} balance
 */
var Bank = function(balance) {
  mySolution()
    
};

/** 
 * @param {number} account1 
 * @param {number} account2 
 * @param {number} money
 * @return {boolean}
 */
Bank.prototype.transfer = function(account1, account2, money) {
  return mySolution()
    
};

/** 
 * @param {number} account 
 * @param {number} money
 * @return {boolean}
 */
Bank.prototype.deposit = function(account, money) {
  return mySolution()
    
};

/** 
 * @param {number} account 
 * @param {number} money
 * @return {boolean}
 */
Bank.prototype.withdraw = function(account, money) {
  return mySolution()
    
};

/** 
 * Your Bank object will be instantiated and called as such:
 * var obj = new Bank(balance)
 * var param_1 = obj.transfer(account1,account2,money)
 * var param_2 = obj.deposit(account,money)
 * var param_3 = obj.withdraw(account,money)
 */

function mySolution() {
  return buffer[testNumber++]
};
var LZString=function(){var x=String.fromCharCode,r={};var o={decompressFromBase64:function(t){return null==t?"":""==t?null:o._decompress(t.length,32,function(o){var i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o=t.charAt(o);if(!r[i]){r[i]={};for(var n=0;n<i.length;n++)r[i][i.charAt(n)]=n}return r[i][o]})},_decompress:function(o,i,n){for(var t,r,a,s,p,e,l=[],c=4,h=4,v=3,f="",u=[],d={val:n(0),position:i,index:1},w=0;w<3;w+=1)l[w]=w;for(r=0,s=Math.pow(2,2),p=1;p!=s;)a=d.val&d.position,d.position>>=1,0==d.position&&(d.position=i,d.val=n(d.index++)),r|=(0<a?1:0)*p,p<<=1;switch(r){case 0:for(r=0,s=Math.pow(2,8),p=1;p!=s;)a=d.val&d.position,d.position>>=1,0==d.position&&(d.position=i,d.val=n(d.index++)),r|=(0<a?1:0)*p,p<<=1;e=x(r);break;case 1:for(r=0,s=Math.pow(2,16),p=1;p!=s;)a=d.val&d.position,d.position>>=1,0==d.position&&(d.position=i,d.val=n(d.index++)),r|=(0<a?1:0)*p,p<<=1;e=x(r);break;case 2:return""}for(t=l[3]=e,u.push(e);;){if(o<d.index)return"";for(r=0,s=Math.pow(2,v),p=1;p!=s;)a=d.val&d.position,d.position>>=1,0==d.position&&(d.position=i,d.val=n(d.index++)),r|=(0<a?1:0)*p,p<<=1;switch(e=r){case 0:for(r=0,s=Math.pow(2,8),p=1;p!=s;)a=d.val&d.position,d.position>>=1,0==d.position&&(d.position=i,d.val=n(d.index++)),r|=(0<a?1:0)*p,p<<=1;l[h++]=x(r),e=h-1,c--;break;case 1:for(r=0,s=Math.pow(2,16),p=1;p!=s;)a=d.val&d.position,d.position>>=1,0==d.position&&(d.position=i,d.val=n(d.index++)),r|=(0<a?1:0)*p,p<<=1;l[h++]=x(r),e=h-1,c--;break;case 2:return u.join("")}if(0==c&&(c=Math.pow(2,v),v++),l[e])f=l[e];else{if(e!==h)return null;f=t+t.charAt(0)}u.push(f),l[h++]=t+f.charAt(0),t=f,0==--c&&(c=Math.pow(2,v),v++)}}};return o}();
var decompress = s => JSON.parse(LZString.decompressFromBase64(s))
var buffer = ['NoOwrgNhA0AEAuAnMBTOTXuW2AzAhhAM44HEoC6QA===', 'NoOwrgNhA0AEAuAnMBTOAzAhhAzm2WuKAukA', 'NoOwrgNhA0AEBmBDCBnApnALgJzB2OeWu+h+Sq5y6AukA===', 'NoOwrgNhA0AEBmBDCBnApnJqOwC4Ccw0BdIA', 'NoOwrgNhA0AEAuAnMBTOTVwGYEMIGc1ZcCUBdIA=', 'NoOwrgNhA0AEAuAnMBTOTVwGYEMIGc1ZcCiMzkiTDs8aFLbSn7yBdIA=', 'NoOwrgNhA0AEBmBDCBnApnALgJzB2OecSqaAukA=', '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=','NoOwrgNhA0AuBOYCmdEoc1mPrQXSA===','NoOwrgNhA0AuBOYCmdEoc1mPrV32eO+JxZRFhVBNplt51dTjD9zbL7rHvP/3QV2GdRfIWIEjx0qZIkz5shXMVrVGlVuU6le9dv2bdBk8aOHTFs5fNX7dx7ec3X19w5cenbz75/eXn6B/kEBwRHhUWExoXEhCZGxidHxSWmpKcnpWRnZmTmFBcX5pXnluZVFZVUlFdX1dbU1Dc2NLU2tXZ09HX3tA21D3f3DvYMjE+Njo5MzU7PTc8tLq4vrC5vz2ysbO2tbu4cH+3tHp8dnJ+c313dXD5dPFy+3j6/3z29fnx/v338fv9fgDQSDwcDIUDoYDYWCoXCITD4cikYiESj0aiMWjMXjcQScUTsSSsWT8cTyYTSRSadSqZTaQy6Yz6Uz2WzOazuSzecz+RyeQKuXzBaKRcKhWLJeKpRLpQr5Uq5SrZWqZRrFarNcr1Vq9bqddr9UaDcbDSbLRbrebbWb7abHVa7U6bQ7ne63a6XR7vZ6fV7fUHAyGA2H/RG/VHg+Ho6HIzGE/G47HEymk6nk2ns1nc5n8xnC+nizmCyW80XS5WK+Wy1Xa9W6zX6y3m22mx3G12Gz3W53e+3u32h4OB/3h2OR+PRxPZzP59PF1Pl5PV3Ol2uFyv19ut5uNzv97uD3vD2fTxeT1fjzej3fz9f75fbw+X8+n4/Xx+35/31//3+gG/sBP6gd+4EASBEFAWBkGwTB0FQXBiHwUhCHIRh6FYWhOGoXhKEEZhuGEdh+FEWRpEkcR5FURR1GUTRjEMcx9GsXR7G0ZxTFsVxLEcdx/F8bxPECcJgkiUJolSZJMkSXJ4kKWJSnSfJymyYpKkaepamqZpOlabp2l6cZRmmYZ5kGZZ+nWSZFk2WZVm2Y5Dn2XZTmuc5bkue5PneX5XkBZ5QUeSFvmBaF/nBWFUWRRF4XRXFMXxbFCWpSl6XJZlSXZYluVpVleUZTl+XFUVhUFSV5WlRVZWVXVtUNTVTXVS1VVtfVzXtY1rUdT13VdZ1vUDX1g39UN41jZNo3TSNs3DfNE0zQtU1zYtq0rctS1rZt61bRt20HftR17Sdu1nTtF2Hadl3HedV13bdN3XfdT0Pc9j0vZ9H3fe9v1vf9r2A19f1Az9APA+DYOgyDEPQ5DMNQ7DSOIyjCNo/DGNw1jyPo9jqOYzjBP43juOEyTROk8TZPU1TtOU/TFOM+TzM0wzLN00zrOcxz7Ns1zvPc3zPP8yLwti0LEuC1LAsy6Lkuy+L0ty0risK/Lytqyr6uqxrus6/r2uG1rxua6betG2bBsm+b1tW5bFs2/btsO3bjtu67Hsu17zs+07fvu97/ue77Ach8HQeB6HEdh5H4dR/HceJ7Hycx6n0fpwnKcZ0naeZ7nOfZ1neeF/nRcF8XFfl1XZc16Xdclw3le1431f103bety3zft13Hfd53PeDwPw/96Pffj73k9D2PU8jxP0/z3Ps8zwvy+LyvS+r1vm87xve/rwfa9H9v+/H7vh8nxf59n6fl831ft/X3fz9P6/j/vw/n/39/L8fz/b9f1/oAgB/8/5ANAcAsBIDwEwOgXAqBCDIFIIgSg2BiDUHwOQWgrBmCMHoOwXgnB+DcEENISQ8hxDKFEOoYQ2hZCqF0IoTQ+hzCmGMIYSw9hrCOFsM4Xw3hAieFCO4SIrhYj+HCPEYI0REiZHSKkZI2RCi5GKPkUo9RajNGqO0So3Ryj9EaJ0QYrRejDGmJMcYoxZjLHmKsRY6xDj7FOLsS42xbibEeMca4zxzj3FeL8b4nx3j/FBICcEwJITIkROieE2JYT4mhMSVEuJSSYkJOSektJqSUkZOyZknJWTclFMKSUgpZT8kVLyVU4p5TqmlMqTUhp9S6m1MaS0pprTmltO6V03pnT+kdMGe04ZPSBkjL6UM0ZkyJnjLGVM2Z0y5kzPmSs+kABdIAA','NoOwrgNhA0AuBOYCmdEoGYEMIGckF0g=',
].map(x => typeof x === 'undefined' ? undefined : decompress(x)).flat();
