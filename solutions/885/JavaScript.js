/*
 * language: JavaScript
 * problem: 885. Spiral Matrix III
 * link: https://leetcode.com/problems/spiral-matrix-iii/
 * note: compressed
 * author: Brute Lee <https://github.com/rdancer/brute-lee>
 */
testNumber = 0;
/**
 * @param {number} rows
 * @param {number} cols
 * @param {number} rStart
 * @param {number} cStart
 * @return {number[][]}
 */
var spiralMatrixIII = function(rows, cols, rStart, cStart) {
  return buffer[testNumber++];
}

// Adapted from the LZMA-JS library which is Copyright 2015 Nathan Rugg <nmrugg@gmail.com> and licensed under the MIT license.
var LZMA=function(){"use strict";var t=4294967296,d=[4294967295,-t],_=[0,0],s=[1,0];function c(e){var r=[];return r[e-1]=void 0,r}function i(e,r){return m(e[0]+r[0],e[1]+r[1])}function u(e,r){var o,n;return e[0]==r[0]&&e[1]==r[1]?0:(o=e[1]<0,n=r[1]<0,o&&!n||(o||!n)&&m(e[0]-r[0],e[1]-r[1])[1]<0?-1:1)}function m(e,r){var o,n;for(e%=0x10000000000000000,r=(r%=0x10000000000000000)-(o=r%t)+(n=Math.floor(e/t)*t),e=e-n+o;e<0;)e+=t,r-=t;for(;4294967295<e;)e-=t,r+=t;for(r%=0x10000000000000000;0x7fffffff00000000<r;)r-=0x10000000000000000;for(;r<-0x8000000000000000;)r+=0x10000000000000000;return[e,r]}function a(e){return 0<=e?[e,0]:[e+t,-t]}function f(e){return 2147483648<=e[0]?~~Math.max(Math.min(e[0]-t,2147483647),-2147483648):~~Math.max(Math.min(e[0],2147483647),-2147483648)}function p(e){return e.pos>=e.count?-1:255&e.buf[e.pos++]}function n(e,r,o){for(var n,t,s,i="",u=[],m=0;m<5;++m){if(-1==(n=p(r)))throw new Error("truncated input");u[m]=n<<24>>24}if(!function(e,r){var o,n,t,s,i;if(r.length<5)return;for(i=255&r[0],t=i%9,s=(i=~~(i/9))%5,i=~~(i/5),n=o=0;n<4;++n)o+=(255&r[1+n])<<8*n;if(99999999<o||!function(e,r,o,n){if(8<r||4<o||4<n)return;!function(e,r,o){var n,t;if(null==e.m_Coders||e.m_NumPrevBits!=o||e.m_NumPosBits!=r)for(e.m_NumPosBits=r,e.m_PosMask=(1<<r)-1,e.m_NumPrevBits=o,t=1<<e.m_NumPrevBits+e.m_NumPosBits,e.m_Coders=c(t),n=0;n<t;++n)e.m_Coders[n]=function(e){return e.m_Decoders=c(768),e}({})}(e.m_LiteralDecoder,o,r);o=1<<n;return R(e.m_LenDecoder,o),R(e.m_RepLenDecoder,o),e.m_PosStateMask=o-1,1}(e,t,s,i))return;return function(e,r){if(r<0)return;e.m_DictionarySize!=r&&(e.m_DictionarySize=r,e.m_DictionarySizeCheck=Math.max(e.m_DictionarySize,1),function(e,r){null!=e._buffer&&e._windowSize==r||(e._buffer=c(r));e._windowSize=r,e._pos=0,e._streamPos=0}(e.m_OutWindow,Math.max(e.m_DictionarySizeCheck,4096)));return 1}(e,o)}(s=function(e){e.m_OutWindow={},e.m_RangeDecoder={},e.m_IsMatchDecoders=c(192),e.m_IsRepDecoders=c(12),e.m_IsRepG0Decoders=c(12),e.m_IsRepG1Decoders=c(12),e.m_IsRepG2Decoders=c(12),e.m_IsRep0LongDecoders=c(192),e.m_PosSlotDecoder=c(4),e.m_PosDecoders=c(114),e.m_PosAlignDecoder=S({},4),e.m_LenDecoder=h({}),e.m_RepLenDecoder=h({}),e.m_LiteralDecoder={};for(var r=0;r<4;++r)e.m_PosSlotDecoder[r]=S({},6);return e}({}),u))throw new Error("corrupted input");for(m=0;m<64;m+=8){if(-1==(n=p(r)))throw new Error("truncated input");i=(n=1==(n=n.toString(16)).length?"0"+n:n)+""+i}/^0+$|^f+$/i.test(i)?e.length_0=d:(t=parseInt(i,16),e.length_0=4294967295<t?d:a(t)),e.chunker=(t=s,s=o,o=e.length_0,t.m_RangeDecoder.Stream=r,w(t.m_OutWindow),t.m_OutWindow._stream=s,function(e){e.m_OutWindow._streamPos=0,e.m_OutWindow._pos=0,B(e.m_IsMatchDecoders),B(e.m_IsRep0LongDecoders),B(e.m_IsRepDecoders),B(e.m_IsRepG0Decoders),B(e.m_IsRepG1Decoders),B(e.m_IsRepG2Decoders),B(e.m_PosDecoders),function(e){var r,o;for(o=1<<e.m_NumPrevBits+e.m_NumPosBits,r=0;r<o;++r)B(e.m_Coders[r].m_Decoders)}(e.m_LiteralDecoder);for(var r=0;r<4;++r)B(e.m_PosSlotDecoder[r].Models);C(e.m_LenDecoder),C(e.m_RepLenDecoder),B(e.m_PosAlignDecoder.Models),function(e){e.Code=0,e.Range=-1;for(var r=0;r<5;++r)e.Code=e.Code<<8|p(e.Stream)}(e.m_RangeDecoder)}(t),t.state=0,t.rep0=0,t.rep1=0,t.rep2=0,t.rep3=0,t.outSize=o,t.nowPos64=_,t.prevByte=0,function(e,r){return e.decoder=r,e.encoder=null,e.alive=1,e}({},t))}function D(e,r){var o;return e.output=((o={}).buf=c(32),o.count=0,o),n(e,((o={}).buf=r=r,o.pos=0,o.count=r.length,o),e.output),e}function l(e){var r=e._pos-e._streamPos;if(r){for(var o=e._stream,n=e._buffer,t=e._streamPos,s=n,i=t,u=o.buf,m=o.count,d=r,_=0;_<d;++_)u[m+_]=s[i+_];o.count+=r,e._pos>=e._windowSize&&(e._pos=0),e._streamPos=e._pos}}function g(e,r){r=e._pos-r-1;return r<0&&(r+=e._windowSize),e._buffer[r]}function w(e){l(e),e._stream=null}function v(e){if(!e.alive)throw new Error("bad state");if(e.encoder)throw new Error("No encoding");var r=e,o=function(e){var r,o,n;if(n=f(e.nowPos64)&e.m_PosStateMask,L(e.m_RangeDecoder,e.m_IsMatchDecoders,(e.state<<4)+n)){if(L(e.m_RangeDecoder,e.m_IsRepDecoders,e.state))r=0,L(e.m_RangeDecoder,e.m_IsRepG0Decoders,e.state)?(L(e.m_RangeDecoder,e.m_IsRepG1Decoders,e.state)?(L(e.m_RangeDecoder,e.m_IsRepG2Decoders,e.state)?(o=e.rep3,e.rep3=e.rep2):o=e.rep2,e.rep2=e.rep1):o=e.rep1,e.rep1=e.rep0,e.rep0=o):L(e.m_RangeDecoder,e.m_IsRep0LongDecoders,(e.state<<4)+n)||(e.state=e.state<7?9:11,r=1),r||(r=P(e.m_RepLenDecoder,e.m_RangeDecoder,n)+2,e.state=e.state<7?8:11);else if(e.rep3=e.rep2,e.rep2=e.rep1,e.rep1=e.rep0,r=2+P(e.m_LenDecoder,e.m_RangeDecoder,n),e.state=e.state<7?7:10,4<=(o=M(e.m_PosSlotDecoder[function(e){return(e-=2)<4?e:3}(r)],e.m_RangeDecoder))){if(n=(o>>1)-1,e.rep0=(2|1&o)<<n,o<14)e.rep0+=function(e,r,o,n){var t,s,i=1,u=0;for(s=0;s<n;++s)t=L(o,e,r+i),i=(i<<1)+t,u|=t<<s;return u}(e.m_PosDecoders,e.rep0-o-1,e.m_RangeDecoder,n);else if(e.rep0+=function(e,r){var o,n,t=0;for(o=r;0!=o;--o)e.Range>>>=1,n=e.Code-e.Range>>>31,e.Code-=e.Range&n-1,t=t<<1|1-n,-16777216&e.Range||(e.Code=e.Code<<8|p(e.Stream),e.Range<<=8);return t}(e.m_RangeDecoder,n-4)<<4,e.rep0+=function(e,r){var o,n,t=1,s=0;for(n=0;n<e.NumBitLevels;++n)o=L(r,e.Models,t),t=(t<<1)+o,s|=o<<n;return s}(e.m_PosAlignDecoder,e.m_RangeDecoder),e.rep0<0)return-1==e.rep0?1:-1}else e.rep0=o;if(0<=u(a(e.rep0),e.nowPos64)||e.rep0>=e.m_DictionarySizeCheck)return-1;!function(e,r,o){var n=e._pos-r-1;for(n<0&&(n+=e._windowSize);0!=o;--o)n>=e._windowSize&&(n=0),e._buffer[e._pos++]=e._buffer[n++],e._pos>=e._windowSize&&l(e)}(e.m_OutWindow,e.rep0,r),e.nowPos64=i(e.nowPos64,a(r)),e.prevByte=g(e.m_OutWindow,0)}else n=function(e,r,o){return e.m_Coders[((r&e.m_PosMask)<<e.m_NumPrevBits)+((255&o)>>>8-e.m_NumPrevBits)]}(e.m_LiteralDecoder,f(e.nowPos64),e.prevByte),e.state<7?e.prevByte=function(e,r){var o=1;for(;o=o<<1|L(r,e.m_Decoders,o),o<256;);return o<<24>>24}(n,e.m_RangeDecoder):e.prevByte=function(e,r,o){var n,t,s=1;do{if(t=o>>7&1,o<<=1,n=L(r,e.m_Decoders,(1+t<<8)+s),s=s<<1|n,t!=n){for(;s<256;)s=s<<1|L(r,e.m_Decoders,s);break}}while(s<256);return s<<24>>24}(n,e.m_RangeDecoder,g(e.m_OutWindow,e.rep0)),function(e,r){e._buffer[e._pos++]=r,e._pos>=e._windowSize&&l(e)}(e.m_OutWindow,e.prevByte),e.state=function(e){return e<4?0:e<10?e-3:e-6}(e.state),e.nowPos64=i(e.nowPos64,s);return 0}(r.decoder);if(-1==o)throw new Error("corrupted input");return r.inBytesProcessed=d,r.outBytesProcessed=r.decoder.nowPos64,(o||0<=u(r.decoder.outSize,_)&&0<=u(r.decoder.nowPos64,r.decoder.outSize))&&(l(r.decoder.m_OutWindow),w(r.decoder.m_OutWindow),r.decoder.m_RangeDecoder.Stream=null,r.alive=0),e.alive}function R(e,r){for(;e.m_NumPosStates<r;++e.m_NumPosStates)e.m_LowCoder[e.m_NumPosStates]=S({},3),e.m_MidCoder[e.m_NumPosStates]=S({},3)}function P(e,r,o){var n;return L(r,e.m_Choice,0)?(n=8,L(r,e.m_Choice,1)?n+=8+M(e.m_HighCoder,r):n+=M(e.m_MidCoder[o],r),n):M(e.m_LowCoder[o],r)}function h(e){return e.m_Choice=c(2),e.m_LowCoder=c(16),e.m_MidCoder=c(16),e.m_HighCoder=S({},8),e.m_NumPosStates=0,e}function C(e){B(e.m_Choice);for(var r=0;r<e.m_NumPosStates;++r)B(e.m_LowCoder[r].Models),B(e.m_MidCoder[r].Models);B(e.m_HighCoder.Models)}function S(e,r){return e.NumBitLevels=r,e.Models=c(1<<r),e}function M(e,r){for(var o=1,n=e.NumBitLevels;0!=n;--n)o=(o<<1)+L(r,e.Models,o);return o-(1<<e.NumBitLevels)}function L(e,r,o){var n=r[o],t=(e.Range>>>11)*n;return(-2147483648^e.Code)<(-2147483648^t)?(e.Range=t,r[o]=n+(2048-n>>>5)<<16>>16,-16777216&e.Range||(e.Code=e.Code<<8|p(e.Stream),e.Range<<=8),0):(e.Range-=t,e.Code-=t,r[o]=n-(n>>>5)<<16>>16,-16777216&e.Range||(e.Code=e.Code<<8|p(e.Stream),e.Range<<=8),1)}function B(e){for(var r=e.length-1;0<=r;--r)e[r]=1024}return{decompress:function(e,r,o){var n,t={};for(t.d=D({},e);v(t.d.chunker););e=t.d.output,(n=e.buf).length=e.count;for(var s,i,u,m=n,d=0,_=0,c=m.length,a=[],f=[];d<c;++d,++_){if(128&(s=255&m[d]))if(192==(224&s)){if(c<=d+1)return m;if(128!=(192&(i=255&m[++d])))return m;f[_]=(31&s)<<6|63&i}else{if(224!=(240&s))return m;if(c<=d+2)return m;if(128!=(192&(i=255&m[++d])))return m;if(128!=(192&(u=255&m[++d])))return m;f[_]=(15&s)<<12|(63&i)<<6|63&u}else{if(!s)return m;f[_]=s}16383==_&&(a.push(String.fromCharCode.apply(String,f)),_=-1)}return 0<_&&(f.length=_,a.push(String.fromCharCode.apply(String,f))),a.join("")}}}();

function decompress(base64String) {
    const binaryString = atob(base64String)
    const uint8array = Uint8Array.from(binaryString, (c) => c.charCodeAt(0))
    const json = LZMA.decompress(uint8array)
    const buffer = JSON.parse(json)
    return buffer
}

buffer = decompress(
''
)